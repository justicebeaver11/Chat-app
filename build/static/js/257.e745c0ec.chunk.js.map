{"version":3,"file":"static/js/257.e745c0ec.chunk.js","mappings":"iTAUe,SAASA,IAEpB,MACMC,GAAWC,EAAAA,EAAAA,OACZC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IAClCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,eAASK,GAC/CC,EAAe,CACrBC,SAAU,eACVC,UAAW,IACXC,cAAc,EACdC,WAAW,EACXC,MAAO,SAEPC,EAAAA,EAAAA,YAAUC,UACDC,aAAaC,QAAQ,kBACtBnB,EAAS,SACb,GACD,IAyCH,OAdCgB,EAAAA,EAAAA,YAAUC,UACX,MAAMG,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,QAAcC,IAAAA,IAAU,GAADC,OA9CtB,sCA+CC,KAAAA,OAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,YAEtBC,EAAS,IAAIC,EAAAA,GAAOP,EAAMF,MAChCA,EAAKU,KAAKF,EAAOG,SAAS,UAC5B,CACA5B,EAAWiB,GACXd,GAAa,EAAM,GAClB,KAIG0B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACK7B,GACG8B,EAAAA,EAAAA,KAACC,EAAS,CAAAF,UACNC,EAAAA,EAAAA,KAAA,OAAKE,IAAKC,EAAQC,IAAI,SAASC,UAAU,cAGzCR,EAAAA,EAAAA,MAACI,EAAS,CAAAF,SAAA,EACNC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,kBAAiBN,UAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8CAERC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,UAASN,SACnBhC,EAAQuC,KAAI,CAACC,EAAQC,KAEdR,EAAAA,EAAAA,KAAA,OAEIK,UAAS,UAAAhB,OAAYjB,IAAmBoC,EAAQ,WAAa,IACtDT,UAEPC,EAAAA,EAAAA,KAAA,OACIE,IAAG,6BAAAb,OAA+BkB,GAClCH,IAAI,SAEJK,QAASA,IAAMpC,EAAkBmC,MARhCA,QAcrBR,EAAAA,EAAAA,KAAA,UAAQS,QApEF3B,UACtB,QAAuBR,IAAnBF,EACAsC,EAAAA,GAAMC,MAAM,0BAA2BpC,OACpC,CACH,MAAMqC,QAAaC,KAAKC,MACpB/B,aAAaC,QAAQ,mBAGnB,KAAEC,SAAeG,IAAAA,KAAW,GAADC,OAAI0B,EAAAA,GAAc,KAAA1B,OAAIuB,EAAKI,KAAO,CAC/D7B,MAAOpB,EAAQK,KAEfa,EAAKgC,OACLL,EAAKM,kBAAmB,EACxBN,EAAKO,YAAclC,EAAKE,MACxBJ,aAAaqC,QACT,gBACAP,KAAKQ,UAAUT,IAEnB/C,EAAS,MAEjB6C,EAAAA,GAAMC,MAAM,0CAA2CpC,EAEvD,GA8CoD8B,UAAU,aAAYN,SAAC,+BAKtEC,EAAAA,EAAAA,KAACsB,EAAAA,GAAc,MAI5B,CACA,MAAMrB,EAAYsB,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4gC,yFC5GrB,MAAMC,EAAO,wBACPC,EAAa,GAAAvC,OAAMsC,EAAI,sBACvBE,EAAU,GAAAxC,OAAMsC,EAAI,mBACpBZ,EAAc,GAAA1B,OAAMsC,EAAI,uBACxBG,EAAa,GAAAzC,OAAMsC,EAAI,sBACvBI,EAAgB,GAAA1C,OAAMsC,EAAI,wBAC1BK,EAAmB,GAAA3C,OAAMsC,EAAI,uB","sources":["pages/SetAvatar.jsx","utils/APIRoutes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport loader from \"../assets/loader.gif\";\r\nimport { setAvatarRoute } from \"../utils/APIRoutes\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nexport default function SetAvatar() {\r\n \r\n    const api = `https://api.multiavatar.com/4645646`;\r\n    const navigate = useNavigate();\r\n  const [avatars, setAvatars] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n    const [selectedAvatar, setSelectedAvatar] = useState(undefined);\r\n    const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n    };\r\n    useEffect(async () => {\r\n        if (!localStorage.getItem(\"chat-app-user\")) {\r\n            navigate(\"/login\");\r\n        }\r\n    }, []); \r\n    \r\n    const setProfilePicture = async () => { \r\n        if (selectedAvatar === undefined) {\r\n            toast.error(\"Please select an avatar\", toastOptions);\r\n        } else {\r\n            const user = await JSON.parse(\r\n                localStorage.getItem(\"chat-app-user\")\r\n            );\r\n\r\n            const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n                image: avatars[selectedAvatar],\r\n            });\r\n            if (data.isSet) {\r\n                user.isAvatarImageSet = true;\r\n                user.avatarImage = data.image;\r\n                localStorage.setItem(\r\n                    \"chat-app-user\",\r\n                    JSON.stringify(user)\r\n                );\r\n                navigate(\"/\");\r\n            } else {\r\n        toast.error(\"Error setting avatar. Please try again.\", toastOptions);\r\n      }\r\n        }\r\n            \r\n    };\r\n     useEffect(async () => {\r\n    const data = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      const image = await axios.get(\r\n        `${api}/${Math.round(Math.random() * 1000)}`\r\n      );\r\n      const buffer = new Buffer(image.data);\r\n      data.push(buffer.toString(\"base64\"));\r\n    }\r\n    setAvatars(data);\r\n    setIsLoading(false);\r\n  }, []);\r\n \r\n \r\n    return (\r\n        <>\r\n            {isLoading ?\r\n                <Container>\r\n                    <img src={loader} alt=\"loader\" className=\"loader\" />\r\n                </Container>\r\n                : (\r\n                    <Container>\r\n                        <div className=\"title-container\">\r\n                            <h1>Pick an Avatar as your profile picture</h1>\r\n                        </div>\r\n                        <div className=\"avatars\">\r\n                            {avatars.map((avatar, index) => {\r\n                                return (\r\n                                    <div\r\n                                        key={index}\r\n                                        className={`avatar ${selectedAvatar === index ? \"selected\" : \"\"\r\n                                            }`}\r\n                                    >\r\n                                        <img\r\n                                            src={`data:image/svg+xml;base64,${avatar}`}\r\n                                            alt=\"avatar\"\r\n                                \r\n                                            onClick={() => setSelectedAvatar(index)}\r\n                                        />\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        <button onClick={setProfilePicture} className=\"submit-btn\">\r\n                            Set as Profile Picture\r\n                        </button>\r\n                    </Container>\r\n                )}\r\n             <ToastContainer />\r\n            \r\n        </>\r\n    );\r\n}\r\nconst Container = styled.div`\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 3rem;\r\n  background-color: #131324;\r\n  height: 100vh;\r\n  width: 100vw;\r\n\r\n   .loader {\r\n    max-inline-size: 100%;\r\n  }\r\n\r\n  .title-container {\r\n    h1 {\r\n      color: white;\r\n    }\r\n  }\r\n  .avatars {\r\n    display: flex;\r\n    gap: 2rem;\r\n\r\n     .avatar {\r\n      border: 0.4rem solid transparent;\r\n      padding: 0.4rem;\r\n      border-radius: 5rem;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      transition: 0.5s ease-in-out;\r\n      img {\r\n        height: 6rem;\r\n        transition: 0.5s ease-in-out;\r\n      }\r\n    }\r\n      .selected {\r\n      border: 0.4rem solid #4e0eff;\r\n    }\r\n}\r\n .submit-btn {\r\n    background-color: #4e0eff;\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    font-size: 1rem;\r\n    text-transform: uppercase;\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n","export const host = \"http://localhost:5000\";\r\nexport const registerRoute = `${host}/api/auth/register`;\r\nexport const loginRoute = `${host}/api/auth/login`;\r\nexport const setAvatarRoute = `${host}/api/auth/setavatar`;\r\nexport const allUsersRoute = `${host}/api/auth/allusers`;\r\nexport const sendMessageRoute = `${host}/api/messages/addmsg`;\r\nexport const getAllMessagesRoute = `${host}/api/messages/getmsg`;"],"names":["SetAvatar","navigate","useNavigate","avatars","setAvatars","useState","isLoading","setIsLoading","selectedAvatar","setSelectedAvatar","undefined","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","async","localStorage","getItem","data","i","image","axios","concat","Math","round","random","buffer","Buffer","push","toString","_jsxs","_Fragment","children","_jsx","Container","src","loader","alt","className","map","avatar","index","onClick","toast","error","user","JSON","parse","setAvatarRoute","_id","isSet","isAvatarImageSet","avatarImage","setItem","stringify","ToastContainer","styled","div","_templateObject","_taggedTemplateLiteral","host","registerRoute","loginRoute","allUsersRoute","sendMessageRoute","getAllMessagesRoute"],"sourceRoot":""}